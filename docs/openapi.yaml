openapi: 3.0.1
info:
  title: E-Commerce API
  description: APIs for an e-commerce application
  version: 1.0.0

servers:
  - url: https://api.example.com

tags:
  - name: users
    description: User management
  - name: goods
    description: Product catalog management
  - name: counterparties 
    description: Supplier and vendor management
  - name: orders
    description: Order management
  - name: warehouses
    description: Warehouse and inventory management
  - name: invoices
    description: Billing and invoicing  

paths:

  # User management
  
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        description: User details
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                
    get:
      tags:
        - users
      summary: Get all users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get a user
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                  
  # Product catalog        

  /goods:
    post:
      tags:
        - goods
      summary: Create a new product
      requestBody: 
        description: Product details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Good'
      responses:
        201:
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Good'

    get:
      tags:
        - goods  
      summary: Get all products
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Good'

  /goods/{goodId}:
    get:
      tags:
        - goods
      summary: Get a product
      parameters:
        - name: goodId
          in: path
          required: true
          description: Good ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Good'
                
  # Counterparties

  /counterparties:
    post:
      tags:
        - counterparties
      summary: Create a new counterparty 
      requestBody:
        description: Counterparty details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Counterparty'
      responses:
        201:
          description: Counterparty created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counterparty'

    get:
      tags:
        - counterparties
      summary: Get all counterparties
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Counterparty'

  /counterparties/{counterpartyId}:  
    get:
      tags:
        - counterparties
      summary: Get a counterparty
      parameters:
        - name: counterpartyId
          in: path
          required: true
          description: Counterparty ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counterparty'

  # Orders

  /orders:
    post:
      tags:
        - orders
      summary: Create a new order
      requestBody:
        description: Order details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        201:
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

    get:
      tags:
        - orders
      summary: Get all orders
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Get an order
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
      responses:
        200:
          description: Success  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  # Warehouses  
            
  /warehouses:
    post:
      tags:
        - warehouses
      summary: Create a new warehouse
      requestBody:
        description: Warehouse details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Warehouse'
      responses:
        201:
          description: Warehouse created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warehouse'

    get:
      tags:
        - warehouses
      summary: Get all warehouses
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Warehouse'

  /warehouses/{warehouseId}:
    get:
      tags:
        - warehouses
      summary: Get a warehouse
      parameters:
        - name: warehouseId
          in: path
          required: true
          description: Warehouse ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warehouse'

  # Invoices

  /invoices:
    post:
      tags:
        - invoices
      summary: Create a new invoice
      requestBody:
        description: Invoice details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses: 
        201:
          description: Invoice created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'

    get:
      tags:
        - invoices
      summary: Get all invoices
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'

  /invoices/{invoiceId}:  
    get:
      tags:
        - invoices
      summary: Get an invoice
      parameters:
        - name: invoiceId
          in: path
          required: true
          description: Invoice ID
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
                
components:
  schemas:

    # Models  

    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
        name:
          type: string
        email:
          type: string
          format: email

    Good:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number

    Counterparty:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
          enum: [supplier, vendor]

    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total:
          type: number

    OrderItem:
      type: object
      properties:
        good_id:
          type: integer
        quantity:
          type: integer

    Warehouse:
      type: object    
      properties:
        id: 
          type: integer
        name:
          type: string
        location:
          type: string

    Invoice:
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: integer
        total:
          type: number